<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[SmartRoc技术博客]]></title>
  <link href="http://www.holysroc.cn/atom.xml" rel="self"/>
  <link href="http://www.holysroc.cn/"/>
  <updated>2017-07-04T10:40:22+08:00</updated>
  <id>http://www.holysroc.cn/</id>
  <author>
    <name><![CDATA[ph520]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android_IPC_Binder]]></title>
    <link href="http://www.holysroc.cn/blog/android-ipc-binder.html"/>
    <updated>2017-05-17T15:29:53+08:00</updated>
    <id>http://www.holysroc.cn/blog/android-ipc-binder</id>
    <content type="html"><![CDATA[<p>IPC</p>

<h4 id="section">1.简介</h4>

<p>Inter-Process Communication含义进程间通信或者跨进程通信，即两个进程之间进行数据交换的过程。</p>

<p>IPC机制不是Android独有的，任何系统都有响应的机制，比如WINDOWS中通过剪切板，管道和油槽等进行进程间通信；Linus通过命名管道，共享内容，信号量等进行进程间通信；对于安卓，比较有特色的就是Binder，当然还支持Socket。</p>

<!--more-->

<p>什么时候需要用多进程呢？第一种情况是一个应用由于特殊原因自身需要采用多进程模式来实现，其中可能有些模块由于特殊原因需要运行在单独的进程中，又或者为了加大一个应用可使用的内存所以使用多进程获取多份内存空间；第二种情况是当前应用需要向其他应用获取数据，由于是2个应用所以需要跨进程	通信，比如我们的组件ContentProvider，其实也是进程间通信，后续看源码了解下。</p>

<h4 id="section-1">2.安卓中的多进程模式</h4>

<h5 id="section-2">2.1 开启多进程模式</h5>

<p>使用多进程只有一种方式，清单文件AndroidMenifest指定android:process属性，进程名为:remote的当前进程名会加上包名信息，并且是属于私有进程，其他应用的组件不能和他跑在同一进程；而进程名不以”:”开头的则是全局进程，其他应用可以通过ShareUID方式和他跑在同一进程。</p>

<p>Android系统会为每个应用分配唯一UID，具有相同UID的应用才能共享数据；当然两个应用通过ShareUID跑在同一进程必须要求两个应用有相同的ShareUID并且签名相同。具有相同UID的不管是否在同一进程，他们都可以互相访问私有数据,比如data目录，组件信息等，如果是同一进程还能共享内存数据，或者说他们是一个应用的两个部分。</p>

<h5 id="section-3">2.2 多进程运行机制</h5>

<p>所有运行在多进程的四大组件，只要它们之间需要通过内存共享数据，都会失败，比如说</p>

<p>(1)静态成员和单例模式失效</p>

<p>(2)线程同步机制完全失效</p>

<p>(3)SharedPreferences的可靠性下降 （不支持两个进程同时去执行写操作，否则会一定几率丢失数据，因为它的底层是写XML文件，并发写显示可能出问题）</p>

<p>(4)Application会多次创建（一个组件启动另一个进程，新的进程会被分配独立的虚拟机，这其实就是个启动过程。 实验：可以创建一个工程，创建3个不同process的Activity，一个个启动，打印自定义的MyApplication的线程，可以发现打印了3次）</p>

<h5 id="ipc">2.3 IPC基本概念</h5>

<h5 id="androidipc">2.4 Android中的IPC方式</h5>

<ul>
  <li>使用Bundle</li>
  <li>使用文件共享</li>
  <li>使用Messager （这种方式是串行的，高并发不适合，而且它主要是传递消息，无法跨进程调用服务端的方法）</li>
  <li>使用ContentProvider</li>
  <li>使用Socket</li>
  <li>使用AIDL (<a href="https://github.com/wo20sun/AllRound/tree/master/aidl">Demo项目地址</a>)</li>
</ul>

<p>看完小Demo之后，有几个注意事项：</p>

<ol>
  <li>RemoteCallbackList是系统专门提供的用于删除跨进程listener的接口，是一个泛型<e extends="" iinterface="">，支持任意的AIDL接口，所有的AIDL接口都继承IInterface;它的工作原理，内部是一个ArrayMap&lt;IBinder,Callback&gt;，根据虽然多次跨进程传输的同一个对象会生成不同对象(这也是List管理时取消不掉注册监听的原因)，但是他们底层都是同一个Bind对象的特性能找出对应的Callback从而完成工作；另外它内部也实现了线程同步，不需要额外的线程同步工作；最后注意他的用法，比如取集合大小的时候， begin..和finsh..必须成对出现</e></li>
  <li>当客户端调用远程服务的时候，远程服务是运行在Binder线程池的，而且客户端会被挂起，如果服务端比较耗时，客户端就会堵塞，如果客户端又是UI线程会导致ANR；而且客户端onServiceConnected和onServiceDisConnected都是在UI线程，所以执行的时候请开线程（Demo中并未有那么做，请注意）；另外服务端方法本身就是执行在线程池的，请不要另开线程执行任务，除非你知道你这么干，否则不要这么做；同理，服务端掉客户端的接口也是一个道理，耗时任务请开线程，否则服务端无法响应；而且客户端的onNewBookArrive方法是运行在Binder线程池的，不要操作UI，请用Handler。</li>
  <li>Binder可能意外死亡，一般是由于服务端进程挂了，需要重新连接。有两种方法，第一种，给Binder设置DeathRecipient监听，死亡时会回调binderDied方法,在里面重连服务；第二种，onServiceDisConnected方法里面重连；二者的区别前者是Binder线程池的回调，后者是UI线程的回调。</li>
  <li>权限验证，默认情况下任何人都可以连接远程服务。有两种方式进行验证，第一种，在onBind方法里面验证permission,当然需要我们先自定义权限，然后在代码中调用checkCallingOrSelfPermission方法；第二种方法，在服务端的onTransact方法中进行权限验证，还可以采用UID和PID来验证，通过getCallingUid和getCallingPid方法拿到客户端所属的UID和PID，根据UID和PackageManager的getPakagesForUid方法获取包名再验证</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式-面向对象五大原则]]></title>
    <link href="http://www.holysroc.cn/blog/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B.html"/>
    <updated>2017-04-26T10:20:49+08:00</updated>
    <id>http://www.holysroc.cn/blog/设计模式-单例</id>
    <content type="html"><![CDATA[<p>面向对象的三大特性：封装，继承，多态；</p>

<p>五大原则：SOLID</p>

<!--more-->

<ul>
  <li>S: 单一职责原则</li>
  <li>O: 开闭原则</li>
  <li>L: 里氏替换原则</li>
  <li>I: 接口隔离原则</li>
  <li>D: 依赖倒置原则</li>
</ul>

<p>单例模式:一个App中都对一个实例进行操作</p>

<p>优点：</p>

<ul>
  <li>性能的开支减少，如果一个实例的创建，需要耗费很多的资源，比如读取配置，产生其他依赖对象，则可以在应用启动时启动一个单例对象*</li>
  <li>内存开支减少，如果一个对象需要频繁的创建和销毁，而且又没有办法对创建和销毁优化</li>
  <li>避免对资源重复占用，如果需要对一个文件进行读写操作，那么一个实例可以避免对这个文件同时读写</li>
  <li>资源共享，可以在全局系统设置访问</li>
</ul>

<p>缺点：</p>

<ul>
  <li>扩展很困难，因为一般没有接口</li>
</ul>

<p>普通的两种写法：饿汉式和懒汉式(延迟加载，用的时候才开始实例化);</p>

<pre><code>饿汉式：
public class Test{  
  
private static final Test test = new Test();  
  
private Test() {  
}  
  
public synchronized static Test getTestInstance() {  
    return test;  
}  
} 

懒汉式式：
public class Test {

private static Test test = null;

private Test() {

}

public synchronized static Test getTestInstance() {
    if (test == null) {
        test = new Test();
    }
    return test;
}
}
</code></pre>

<p>每一次取实例synchronized都同步，需要消耗太多的资源，一般不建议使用，那么看看另一种方式即使用DCL</p>

<pre><code>//DCL写法 (Double-Check-Lock)
public static Test getTestInstance() {
    if (test == null) {
        synchronized (Test.class) {
            if (test == null) {
                test = new Test();
            }
        }
    }
    return test;
}
</code></pre>

<p>DCL这种写法还是有问题，并不能完全避免并发带来的破坏；分析一下，先了解一下写法，第一次判断空是未为了避免不必要的同步，第二次判断为空，是为了创建实例；</p>

<p>这种写法乍看是没问题的，这里引入一个DCL失效的概念，什么情况呢？涉及一个概念创建对象过程中（ test = new Test() ）其实编译器做了三件事，（1）给Test类分配内存，（2）调用构造函数，（3）对象指向内存空间（这一步test不是null了）</p>

<p>由于2，3二步执行顺序是不定的，如果执行是132顺序，A线程执行到3，test不为null了，B线程进来发现test不是null，直接取走了test，再使用时就会出错。这就是DCL失效</p>

<p>但是呢，JDK1.5之后SUN公司主要到了问题就具体化了valitile关键字，private volatile static Test test = null这样就可以保证每次取对象都是从内存中取，这个关键字肯定是影响性能的，但是为了正确性，牺牲是值得的</p>

<p>这种方式满足大部分需求，除非就是高并发场景很复杂或者JDK6以下使用，所以这里又引入了静态类并延迟加载的好方法</p>

<pre><code>public class Test {

private Test() {

}

public static Test getTestInstance() {
    return TestHolder.test;
}

private static class TestHolder{
    private static final Test test = new Test();
}

}
</code></pre>

<p>这种写法比较推荐，又能延迟加载而且解决了并发的问题</p>

<p>还有枚举写法的单例，这里就介绍一下，用的很少</p>

<pre><code>enum SingletonEnum {
	INSTANCE;
	public void doSomething() {
		System.out.println("do sth.");
	}
}
</code></pre>

<p>最后介绍一种容器单例的写法，根据key获取对象；一般会有相同属性类型的对象注册到map中</p>

<pre><code>private static Map&lt;string singleton=""&gt; objMap = new HashMap&lt;string singleton=""&gt;();
/**
 * 注册对象到map中
 * @param key
 * @param instance
 */
public static void registerService(String key, Singleton instance) {
	if (!objMap.containsKey(key) ) {
		objMap.put(key, instance) ;
	}
}

/**
 * 根据key获取对象
 * @param key
 * @return
 */
public static Singleton getService(String key) {
	return objMap.get(key) ;
}
</code></pre>

<p>在安卓源码中，就使用了这种方式</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Activity布局加载流程和布局绘制流程]]></title>
    <link href="http://www.holysroc.cn/blog/Activity%E5%B8%83%E5%B1%80%E5%8A%A0%E8%BD%BD%E5%92%8C%E7%BB%98%E5%88%B6.html"/>
    <updated>2017-04-25T16:41:17+08:00</updated>
    <id>http://www.holysroc.cn/blog/Activity布局加载和绘制</id>
    <content type="html"><![CDATA[<h2 id="activity">Activity布局加载流程和布局绘制流程</h2>

<h3 id="activity-1">Activity布局加载流程</h3>
<!--more-->

<h4 id="activityactivitythreadattach">1.从之前Activity启动流程中有个ActivityThread.attach()这个方法</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">mWindow = new PhoneWindow(this);
</span><span class="line">mWindow.setCallback(this);
</span><span class="line">   	mWindow.setOnWindowDismissedCallback(this);
</span><span class="line">mWindow.getLayoutInflater().setPrivateFactory(this);</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>初始化了mWindow这个对象，其实是PhoneWindow实例法</p>

<h4 id="attachminstrumentationcallactivityoncreateactivity-rstate">2.attach方法里面mInstrumentation.callActivityOnCreate(activity, r.state);</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">public void callActivityOnCreate(Activity activity, Bundle icicle) 
</span><span class="line">{
</span><span class="line">    prePerformCreate(activity);
</span><span class="line">    activity.performCreate(icicle);
</span><span class="line">    postPerformCreate(activity);
</span><span class="line">}
</span><span class="line">
</span><span class="line">final void performCreate(Bundle icicle) {
</span><span class="line">    onCreate(icicle);
</span><span class="line">    mActivityTransitionState.readState(icicle);
</span><span class="line">    performCreateCommon();
</span><span class="line">}
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>可以看到生命周期onCreate是在这里回调的</p>

<h4 id="oncreatesuperoncreateperformlaunchactivity">3. 看onCreate里面代码,做了一些初始化数据;如果我们不调用super.onCreate(),会在performLaunchActivity报异常</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">            if (r.isPersistable()) {
</span><span class="line">                mInstrumentation.callActivityOnCreate(activity, r.state, r.persistentState);
</span><span class="line">            } else {
</span><span class="line">                mInstrumentation.callActivityOnCreate(activity, r.state);
</span><span class="line">            }
</span><span class="line">            if (!activity.mCalled) 
</span><span class="line">                throw new SuperNotCalledException(
</span><span class="line">                    "Activity " + r.intent.getComponent().toShortString() +
</span><span class="line">                    " did not call through to super.onCreate()");
</span><span class="line">            }
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>activity.mCalled这个参数在super.onCreate()赋值为true了,不调用就会抛异常</p>

<h4 id="setcontentview">4. 看setContentView，贴了一些重要代码块</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
</pre></td><td class="code"><pre><code class=""><span class="line">public void setContentView(@LayoutRes int layoutResID) {
</span><span class="line">    getWindow().setContentView(layoutResID);
</span><span class="line">    initWindowDecorActionBar();
</span><span class="line">}
</span><span class="line">
</span><span class="line">@Override
</span><span class="line">public void setContentView(int layoutResID) {
</span><span class="line">    // Note: FEATURE_CONTENT_TRANSITIONS may be set in the process of installing the window
</span><span class="line">    // decor, when theme attributes and the like are crystalized. Do not check the feature
</span><span class="line">    // before this happens.
</span><span class="line">    if (mContentParent == null) {
</span><span class="line">        installDecor();
</span><span class="line">    } else if (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) {
</span><span class="line">        mContentParent.removeAllViews();
</span><span class="line">    }
</span><span class="line">
</span><span class="line">    if (hasFeature(FEATURE_CONTENT_TRANSITIONS)) {
</span><span class="line">        final Scene newScene = Scene.getSceneForLayout(mContentParent, layoutResID,
</span><span class="line">                getContext());
</span><span class="line">        transitionTo(newScene);
</span><span class="line">    } else {
</span><span class="line">        mLayoutInflater.inflate(layoutResID, mContentParent);
</span><span class="line">    }
</span><span class="line">    mContentParent.requestApplyInsets();
</span><span class="line">    final Callback cb = getCallback();
</span><span class="line">    if (cb != null &amp;&amp; !isDestroyed()) {
</span><span class="line">        cb.onContentChanged();
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">
</span><span class="line">private void installDecor() {
</span><span class="line">    if (mDecor == null) {
</span><span class="line">        mDecor = generateDecor();
</span><span class="line">        mDecor.setDescendantFocusability(ViewGroup.FOCUS_AFTER_DESCENDANTS);
</span><span class="line">        mDecor.setIsRootNamespace(true);
</span><span class="line">        if (!mInvalidatePanelMenuPosted &amp;&amp; mInvalidatePanelMenuFeatures != 0) {
</span><span class="line">            mDecor.postOnAnimation(mInvalidatePanelMenuRunnable);
</span><span class="line">        }
</span><span class="line">    }
</span><span class="line">    ...
</span><span class="line">}
</span><span class="line">
</span><span class="line">protected DecorView generateDecor() {
</span><span class="line">    return new DecorView(getContext(), -1);
</span><span class="line">}
</span><span class="line">
</span><span class="line">if (mContentParent == null) {
</span><span class="line">        mContentParent = generateLayout(mDecor);
</span><span class="line">        
</span><span class="line">protected ViewGroup generateLayout(DecorView decor) {
</span><span class="line">    ...
</span><span class="line">
</span><span class="line">    View in = mLayoutInflater.inflate(layoutResource, null);
</span><span class="line">    decor.addView(in, new ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));
</span><span class="line">    mContentRoot = (ViewGroup) in;
</span><span class="line">
</span><span class="line">    ViewGroup contentParent = (ViewGroup)findViewById(ID_ANDROID_CONTENT);
</span><span class="line">    if (contentParent == null) {
</span><span class="line">        throw new RuntimeException("Window couldn't find content container view");
</span><span class="line">    }
</span><span class="line">	...
</span><span class="line">    return contentParent;
</span><span class="line">}
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>可以发现这里就是通过调用LayoutInflater.inflate方法来加载布局文件到内存中,inflate通过对xml解析，将信息解析到了View中，一步步解析到了rootview中；通过对代码的分析，我们发现PhoneWindow中的几个成员变量：mDector，mContentRoot，mContentParent,三者之间是继承关系</p>

<h4 id="mlayoutinflaterinflatelayoutresid-mcontentparent">5. mLayoutInflater.inflate(layoutResID, mContentParent)这个方法</h4>

<p>layoutId作为mContentParent的子View，而mContentParent又是mContentRoot的子View，mContentRoot又是mDector的子View，通过LayoutInflater的inflate方法逐步加载到了内存中，而我们的Activity又持有自身的PhoneWindow的引用，这就相当于我们的Activity持有了我们定义的布局文件的引用，因而Activity的布局文件被加载到了内存中。</p>

<h3 id="activity-2">Activity布局绘制流程</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Activity启动过程]]></title>
    <link href="http://www.holysroc.cn/blog/Activity%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B.html"/>
    <updated>2017-04-24T18:16:09+08:00</updated>
    <id>http://www.holysroc.cn/blog/Activity启动过程</id>
    <content type="html"><![CDATA[<h3 id="section">知识点：</h3>

<p>1.生命周期</p>

<p>2.启动模式
	stand	ard,singletop,singletask,singleinstance
<!--more--></p>

<p>3.启动进程
	清单文件定义Activity的时候，默认属于以包名命名的进程。启动的时候检测这个Activity所属进程是否启动，若没启动，则启动进程后才会执行Activity启动</p>

<p>4.启动方式
	显示，隐式。显示启动需要Activity字节码,不需要执行Intent Filter索引找出那个Activity,而隐士启动则是通过Intent Filter，因为无法获取其他进程的字节码。所以需要启动其他应用的Activity,一般都是隐式。</p>

<p>5.cs模式<br />
	Activity启动过程其实是应用进程和SystemServer进程相互配合启动Activity的过程，应用进程负责生命周期方法等操作，而后者是调用各种服务，将Activity保存在栈中，协调系统资源等操作</p>

<p>6.binder机制
	Android系统存了Zygote进程和SystemServer进程以及各种应用进程等，为了能够实现各种进程之间的通讯，Android系统采用了自己的进程间通讯方式Binder机制。其中主要涉及到了四种角色：Binder Client，Binder Server，Binder Manager， Binder driver。</p>

<h3 id="section-1">代码执行过程:</h3>

<h4 id="section-2">1.请求执行过程</h4>

<p>MyActivity.startActivity()</p>

<p>Activity.startActivity()</p>

<p>Activity.startActivityForResult （知识点 requestcode&gt;=0 是有效值）</p>

<p>Instrumentation.execStartActivty</p>

<p>ActivityManagerNative.getDefault().startActivityAsUser() 前者返回了activitymanagerproxy这个代理对象，这里涉及到进程间通信的知识，引入一个概念，ActivityThread属于应用进程通过ActivityManagerNative这个Ibinder对象调用属于SystemServer进程中的ActivityManagerService,看下面ActivityManagerService.startActivity()</p>

<h4 id="activitymanagerserviceactivity">2.ActivityManagerService接收启动Activity的请求</h4>

<p>ActivityManagerService.startActivity() 
ActvityiManagerService.startActivityAsUser() 
ActivityStackSupervisor.startActivityMayWait() 
ActivityStackSupervisor.startActivityLocked() 
ActivityStackSupervisor.startActivityUncheckedLocked() 
ActivityStackSupervisor.startActivityLocked() 
ActivityStackSupervisor.resumeTopActivitiesLocked() 
ActivityStackSupervisor.resumeTopActivityInnerLocked()</p>

<p>构造了ActivityeRecord对象,解析出Activity的启动模式,对栈做出相应的处理;还初始化了windowManager服务;并对请求的信息进行保存；一系列的逻辑之后执行当前系统栈顶Activity的onPause操作ActivityStack.startPausingLocked()</p>

<h4 id="onpause">3.执行栈顶的onPause</h4>

<p>ActivityStack.startPausingLocked()</p>

<p>IApplicationThread.schudulePauseActivity()</p>

<p>ActivityThread.sendMessage()</p>

<p>ActivityThread.H.sendMessage();</p>

<p>ActivityThread.H.handleMessage()</p>

<p>ActivityThread.handlePauseActivity()</p>

<p>ActivityThread.performPauseActivity()</p>

<p>Activity.performPause()</p>

<p>Activity.onPause()</p>

<p>ActivityManagerNative.getDefault().activityPaused(token)</p>

<p>ActivityManagerService.activityPaused()</p>

<p>ActivityStack.activityPausedLocked()</p>

<p>ActivityStack.completePauseLocked()</p>

<p>ActivityStack.resumeTopActivitiesLocked()</p>

<p>ActivityStack.resumeTopActivityLocked()</p>

<p>ActivityStack.resumeTopActivityInnerLocked()</p>

<p>ActivityStack.startSpecificActivityLocked</p>

<p>ActivityService要调用onPause了,那么应用进程怎么知道呢,这边又是一个IApplicationThread即Binder对象,进程间通信,ActivityThread执行方法schedulePauseActivity;看到源码里面调用了sendMessage,ActivityThread里面定义了一个Handler,主要处理SystemServer进程的消息;应用进程执行完了OnPause再通知系统进程,又回到了第二步的解析方法ActivityStack.resumeTopActivitiesLocked，这时候继续执行activity的启动startSpecificActivityLocked,这个方法先判断了一个需要启动的Activity所需要的进程是否启动，若启动调用realStartProcessLocked,否则Activitymanagerservice.StartProcessLocked先启动进程再启动Activity</p>

<h4 id="activity">4.启动Activity所需的应用进程</h4>

<p>ActivityManagerService.startProcessLocked() 
Process.start() 
ActivityThread.main() 
ActivityThread.attach() 
ActivityManagerNative.getDefault().attachApplication() 
ActivityManagerService.attachApplication()</p>

<p>进行了初始化操作而且传入了新的进程名为”android.app.ActivityThread”，发现最终调用了Zygote并通过Socket的方式让Zygote进程fork出了一个新的进程，并根据刚刚传入的名字反射出该对象并执行了main方法，main方法里面初始化逻辑并创建了UI线程消息队列；main方法结束进程已经启动了,但是还没初始化,后面方法结束进程就全部启动了,这里其实又看到ActivityManagerNative.getDefault().***,进程间通信不再赘述。</p>

<h4 id="activity-1">5.执行启动Activity</h4>

<p>ActivityStackSupervisor.attachApplicationLocked() 
ActivityStackSupervisor.realStartActivityLocked() 
IApplicationThread.scheduleLauncherActivity() 
ActivityThread.sendMessage() 
ActivityThread.H.sendMessage() 
ActivityThread.H.handleMessage() 
ActivityThread.handleLauncherActivity() 
ActivityThread.performLauncherActivity() 
Instrumentation.callActivityOnCreate() 
Activity.onCreate() 
ActivityThread.handleResumeActivity() 
ActivityThread.performResumeActivity() 
Activity.performResume() 
Instrumentation.callActivityOnResume() 
Activity.onResume() 
ActivityManagerNative.getDefault().activityResumed(token)</p>

<p>realStartActivityLocked() 方法开始启动Activity了,又看到了IApplicationThread和消息队列,同样的处理系统过来的消息，这次是callActivityOnCreate(),再而callActivityOnResume(),页面已经展示完毕,还没结束,看下面</p>

<h4 id="activityonstop">6.栈顶Activity执行onStop方法</h4>

<p>Looper.myQueue().addIdleHandler(new Idler()) 
Idler.queueIdle() 
ActivityManagerNative.getDefault().activityIdle() 
ActivityManagerService.activityIdle() 
ActivityStackSupervisor.activityIdleInternalLocked() 
ActivityStack.stopActivityLocked() 
IApplicationThread.scheduleStopActivity() 
ActivityThread.scheduleStopActivity() 
ActivityThread.sendMessage() 
ActivityThread.H.sendMessage() 
ActivityThread.H.handleMessage() 
ActivityThread.handleStopActivity() 
ActivityThread.performStopActivityInner() 
ActivityThread.callCallActivityOnSaveInstanceState() 
Instrumentation.callActivityOnSaveInstanceState() 
Activity.performSaveInstanceState() 
Activity.onSaveInstanceState() 
Activity.performStop() 
Instrumentation.callActivityOnStop() 
Activity.onStop()</p>

<p>handleResumeActivity()方法中主要到Looper.myQueue().addIdleHandler(new Idler())这个方法,跟进去都是熟悉的流程，熟悉的对象，熟悉的方法，最终调用了callActivityOnStop()方法</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2017年的小建议（摘自别人的文章）]]></title>
    <link href="http://www.holysroc.cn/blog/2017%E5%B9%B4%E7%9A%8417%E4%B8%AA%E5%B0%8F%E5%BB%BA%E8%AE%AE.html"/>
    <updated>2017-04-11T02:18:28+08:00</updated>
    <id>http://www.holysroc.cn/blog/2017年的17个小建议</id>
    <content type="html"><![CDATA[<blockquote>
  <p>这一年是如此一言难尽，有着迷惑的开篇、混乱的进程、几乎躁郁的收梢。
可看起来依然花团锦簇，生命中的糖也点缀其中。我们之所以觉得2016年像一场盛大丰富但有点儿糟糕的旅行，也是因为扑面而来的“不确定”太多了一些。
<!--more-->
如果让我来选择2016年度汉字，我想选择”惑”。因为每件事都需要重新判断一遍——我们站在变动的门槛上，很难说什么真的好，真的坏。
于是岁末情怀涌动，无处宣泄，几乎是热切盼望着新的一年，能有什么新的局面。还记得这张图吗？无论嘲讽脸怎么摆，在时光面前，还是难免心生期冀，愿意按下F5，愿意翻开新的一页，愿意试试之前没有做过的事。
“活到一个年纪，绝对不会相信什么突变。只有重创才会让人突变呀！” 这是我去年此时在《新的一年，哪有什么新的自己》一文中写下的一句话。
是的，没有性情大变，也没有华丽转身。“新的一年、新的自己”会被嘲笑，也是因为那近似于一场寄托在运气上的白日梦：新年当天醒来就进入运气无敌好的全新世界，会有传奇故事降临，所到之处顺风顺水。
一天天的，就这样在梦境中蹉跎了。
可你注定和去年此刻不一样。回望的时候才会发现时光在雕琢你、好事情坏运道都在塑造你、情人风雪影响你。你会有点儿欣慰，也难免有点着急。
脱离现实社会谈论 Inner
peace是耍赖的行为。2016年，我们从来没有觉得世间变幻这么快：风口还没过，寒冬又来了；猪已落地，事有反转；有白手套，有黑天鹅；消费已升级，模式又刷新。一切改变都是加速度的，光内心淡定不行。人人都有肉身和灵魂被甩离时代的恐慌感。
从智商和阅历来说，人也是不能容忍自己一成不变的。急而惑的年代，就算你停步，也会被推着走。就算没有华丽转身，当你回头，也难免感慨一声物不是人已非。
新的自己”，不是卡在倒计时的大变活人，这只是绵延的成长，不断的学习，无法控制的新陈代谢。这也不仅仅是自欺欺人，总归需要一个盘点时刻，然后拉一张
To do list，感慨一下，既然改变不可避免，那么不如早早做好准备。 我有一些不成熟的小建议，拿来2017年金龟换酒，或积分换锅。</p>

</blockquote>

<blockquote>
  <p>关于时代
1、不要对抗，不要和趋势作对。如果你每天都拿着手机，就不要感慨世风日下大家都不看书看报、平媒死得好惨。如果可能，尽量加入新兴行业；如果身在传统领域，也不要觉得线上线下必有一战，而是善用科技，将老路走出新意。
2、不要太早否定。电子钱包&amp;互联网金融、陌生人社交App、新盈利模式、微店、自媒体、国产电影、文艺青年咖啡馆、整容……那些你不熟悉、有疑虑、看不上的东西，可能和你一样也在摸索。不要嫌对方low、不要直接关上门，你要知道那可能代表了新的生活方式，而其中隐含的是新的诉求，也许能诱发你新的思路或冲动。
3、不要着急。就算科技和商业日新月异，就算风很大猪漫天飞，明白自己擅长的和有兴趣的更重要。明白人性和人心亘古不变也重要。不是每波潮起都要弄潮，等水落石出也是一种淡定。不要看到别人成功着急，那不代表你的失败。更重要是一急则乱、一乱则败。
关于职业
4、做自己喜欢的事。生存第一，一份工作首先验证生存能力，然后保持独立生活的尊严和体面。生存之外，要有猛烈的爱。否则没法坚持度过那些为此废寝忘食的钻研、口若悬河的宣讲、高强度的作业或出差、漫长的看不到曙光的坚持。
5、知道在哪里有什么。第一份工作去大公司上班好不好？好。你可以学习什么叫体制、系统、专业化、制度、办公室政治、企业文化。去创业公司好不好？好。可以体会密集高速的全领域成长：全能模式开启、抗压能力加成，责任感和领导力增幅、未来可能性广泛。如果在大公司要自由、在创业公司要稳定（或情怀），都是出现了方向偏差，并且会因此痛苦。如果就是仅仅想赚钱，自由职业和个人工作室是很好的选择。
6、莫在职场求真情。职场有真情，那是西门吹雪和叶孤城的惺惺相惜，是基于能力、责任、担当的棋逢对手。也有团队精神的整体荣誉。不要在公司找妈或者找兄弟姐妹。大家离开家，去了陌生城市，租了房子，开始了独立生活，却习惯性的把领导当爹妈，把同事当兄弟姐妹。如果你的重心是“领导从来不安慰我鼓励我、不指点人生迷津”或者“我最喜欢下班和同事们火锅宵夜”，那你还得学着心理断奶、更加独立。
7、职场三年规划。一份工作做一辈子越来越难实现，时代越来越不给你机会。做一份三至五年规划非常必要，你可以看到下一年的“新的自己”身在何方。研究专业的转型方向，研究产品+生活方式、专业+日常领域、线上+线下的跨界方式。做好准备，新机会突然来的时候，你可以接得住。
关于情感
8、宅和内心戏是恋爱死敌。又一年过去了，不要再宅在家里刷剧、管小鲜肉叫老公、和女友连体婴泡在一起、在微信上和异性聊无数屏的天儿、问闺蜜“他到底怎么想的”、写“无主情话”、发朋友圈影射给特定暗恋对象。多走出去，不要彩排，无需辗转，明确表达情绪。祝你恋爱甜蜜。
9、无需和任何人解释感情。独居青年已达到历史峰值，渴望婚姻也并不老套。不要和任何人解释你的生活状态，出柜也好出轨也好，都是你自己的事。不要理亏一样到处解释为何单身、处女也不用总挂在嘴边说，不要和朋友分享性生活细节、也不要拿着任何指南去要礼物或苦练偷心技巧。
10、轻盈相爱，不追求悲壮和深刻。愿新年里感情焕新顺遂，不单方面牺牲、不做懂事儿明理贤良状、不没事就促膝谈心、不强求生活和思维必须一致、不以狗血剧情加深传奇感。轻盈的爱是两人携手看世界，不是密室cp对砍大逃杀。</p>
</blockquote>

<blockquote>
  <p>关于体面 这是一个特意强调的章节
11、生活不该抱着营销心。如果你认同会哭的孩子有糖吃、懂营销的达人过得好，就很难不生出矫饰包装的态度。你会认为朋友圈是拿来秀的、话题是可以炒热的、朋友资源是可以利用的、PPT是可以升值的……恭喜你进入了表演环节，你将丧失真实的土壤和踏实的感觉。
12、别人吃相难看，你可以不喜欢。创业者也好，新营销公司也好，每每做出些三观不正吃相极其难看的案子出来，都会让其他人有一种“虽然low爆但是有效下次我要不要也试试”的堕落感，网红的语出惊人也经常得意的说“可是涨粉了啊”以及“谩骂即勋章”。为什么我们一直说要保持姿态好看？因为可能一件恶心的事会对当下有所帮助，但从长远来看它会恶心你一辈子。所以，讲三观不是为了讲别人，那真的是保护自己的方式啊。
13、不是每个人每件事都要有用。高速前进的时候，你是不会有闲暇看两旁风景。能停下来说几句话的人，都是指点方向的
NPC。所以过于高效率社会容易养成无孔不入的势利气质，见到一个人本能盘算资源、关系、能量，然后安置进自己的社交体系……这有点尴尬。而人们会本能的躲避具有推销员气质的人，保持体面中很重要的一点是，要乐于做一些无用的事。
关于生活
14、一切以开心为好。新的一年来临时，你会发现过往的挣扎和焦虑都是烟云。生活不会因为你百转千回就变了模样，你无论抱着什么样的目标，终其最终，都是为了开心——抛弃那些让你不开心的工作、感情、关系吧。你会有配得上全新一幕，而这一切的前提是，你得先狠心扔了旧的。
15、SHOW ME A PLAN 记得这句话吗？《good wife》的女主角，在面对示爱时的回答。我们可以任性撒娇，但成熟的爱，都有
plan。我们不要说改天再聚、有空喝酒、有缘相见，而是真切的对待每一场饭，每一顿酒，每一次可以在一起的恋情，有计划，有预谋，有实施步骤，有感动细节。甜言蜜语让我们飘在空中，plan让我们踏踏实实降落。
16、试一下不要“说走就走”和“一言不合就刷卡”。
排解生活压力有很多方式，旅行和购物是最快乐的两件事。为了避免“刷卡一时爽，还款火葬场”的次生痛苦，你可以试试有计划的玩乐。拉一张 2017
must buy list 和 must go
list，提前安排好有节奏的购物和出游，笃定的等着预期中的生活之糖，产生一种掌控感，躲开黄金周的海关和双十一的快递，也许你会觉得，啊，今年的我还不错啊。
17、永远不要忘记仪式感。亲爱的，我已经不再叛逆，因为我知道每一个节日、每一个纪念日、每一个值得庆祝的瞬间，都有爱意和关联。我们总是不能免俗的在每个节气来临的时候心情转变，也忍不住在岁末年初回顾和展望，还是要心心念念所爱的人。无论时光怎么变，世界怎么变。多少年来的人类都依然是这样过的。</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Retrofit]]></title>
    <link href="http://www.holysroc.cn/blog/Retrofit.html"/>
    <updated>2017-04-10T11:51:28+08:00</updated>
    <id>http://www.holysroc.cn/blog/Retrofit</id>
    <content type="html"><![CDATA[<h3 id="retrofit">Retrofit</h3>

<p>Retrofit是什么？Type-safe HTTP client for Android and Java by Square，中文是由Square公司开发基于安卓和JAVA平台的的http客户端请求。</p>

<p>如何集成？compile ‘com.squareup.retrofit2:retrofit:2.2.0’（可以去github获取最新版）</p>

<!--more-->

<h3 id="section">基础</h3>

<h4 id="url">1.url规则：</h4>
<p>| path（设置的path）| baseUrl（设置的url）| result（最终请求的结果）|<br />
(对应下面的3行3列)</p>

<p>【绝对路径 /apath】 【http://host:port/a/b】 【http://host:port/apath】</p>

<p>【相对路径 apath】] 【http://host:port/a/b/】 【http://host:port/a/b/apath】</p>

<p>【相对路径 apath】 【http://host:port/a/b】 【http://host:port/a/apath】</p>

<p>【完整路径 http://host:port/aa/apath】【http://host:port/a/b】【http://host:port/aa/apath】</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OkHttp]]></title>
    <link href="http://www.holysroc.cn/blog/OkHttp.html"/>
    <updated>2015-07-09T11:51:28+08:00</updated>
    <id>http://www.holysroc.cn/blog/OkHttp</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
