<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：android | SmartRoc技术博客]]></title>
  <link href="http://www.holysroc.cn/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://www.holysroc.cn/"/>
  <updated>2017-07-04T10:40:22+08:00</updated>
  <id>http://www.holysroc.cn/</id>
  <author>
    <name><![CDATA[ph520]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android_IPC_Binder]]></title>
    <link href="http://www.holysroc.cn/blog/android-ipc-binder.html"/>
    <updated>2017-05-17T15:29:53+08:00</updated>
    <id>http://www.holysroc.cn/blog/android-ipc-binder</id>
    <content type="html"><![CDATA[<p>IPC</p>

<h4 id="section">1.简介</h4>

<p>Inter-Process Communication含义进程间通信或者跨进程通信，即两个进程之间进行数据交换的过程。</p>

<p>IPC机制不是Android独有的，任何系统都有响应的机制，比如WINDOWS中通过剪切板，管道和油槽等进行进程间通信；Linus通过命名管道，共享内容，信号量等进行进程间通信；对于安卓，比较有特色的就是Binder，当然还支持Socket。</p>

<!--more-->

<p>什么时候需要用多进程呢？第一种情况是一个应用由于特殊原因自身需要采用多进程模式来实现，其中可能有些模块由于特殊原因需要运行在单独的进程中，又或者为了加大一个应用可使用的内存所以使用多进程获取多份内存空间；第二种情况是当前应用需要向其他应用获取数据，由于是2个应用所以需要跨进程	通信，比如我们的组件ContentProvider，其实也是进程间通信，后续看源码了解下。</p>

<h4 id="section-1">2.安卓中的多进程模式</h4>

<h5 id="section-2">2.1 开启多进程模式</h5>

<p>使用多进程只有一种方式，清单文件AndroidMenifest指定android:process属性，进程名为:remote的当前进程名会加上包名信息，并且是属于私有进程，其他应用的组件不能和他跑在同一进程；而进程名不以”:”开头的则是全局进程，其他应用可以通过ShareUID方式和他跑在同一进程。</p>

<p>Android系统会为每个应用分配唯一UID，具有相同UID的应用才能共享数据；当然两个应用通过ShareUID跑在同一进程必须要求两个应用有相同的ShareUID并且签名相同。具有相同UID的不管是否在同一进程，他们都可以互相访问私有数据,比如data目录，组件信息等，如果是同一进程还能共享内存数据，或者说他们是一个应用的两个部分。</p>

<h5 id="section-3">2.2 多进程运行机制</h5>

<p>所有运行在多进程的四大组件，只要它们之间需要通过内存共享数据，都会失败，比如说</p>

<p>(1)静态成员和单例模式失效</p>

<p>(2)线程同步机制完全失效</p>

<p>(3)SharedPreferences的可靠性下降 （不支持两个进程同时去执行写操作，否则会一定几率丢失数据，因为它的底层是写XML文件，并发写显示可能出问题）</p>

<p>(4)Application会多次创建（一个组件启动另一个进程，新的进程会被分配独立的虚拟机，这其实就是个启动过程。 实验：可以创建一个工程，创建3个不同process的Activity，一个个启动，打印自定义的MyApplication的线程，可以发现打印了3次）</p>

<h5 id="ipc">2.3 IPC基本概念</h5>

<h5 id="androidipc">2.4 Android中的IPC方式</h5>

<ul>
  <li>使用Bundle</li>
  <li>使用文件共享</li>
  <li>使用Messager （这种方式是串行的，高并发不适合，而且它主要是传递消息，无法跨进程调用服务端的方法）</li>
  <li>使用ContentProvider</li>
  <li>使用Socket</li>
  <li>使用AIDL (<a href="https://github.com/wo20sun/AllRound/tree/master/aidl">Demo项目地址</a>)</li>
</ul>

<p>看完小Demo之后，有几个注意事项：</p>

<ol>
  <li>RemoteCallbackList是系统专门提供的用于删除跨进程listener的接口，是一个泛型<e extends="" iinterface="">，支持任意的AIDL接口，所有的AIDL接口都继承IInterface;它的工作原理，内部是一个ArrayMap&lt;IBinder,Callback&gt;，根据虽然多次跨进程传输的同一个对象会生成不同对象(这也是List管理时取消不掉注册监听的原因)，但是他们底层都是同一个Bind对象的特性能找出对应的Callback从而完成工作；另外它内部也实现了线程同步，不需要额外的线程同步工作；最后注意他的用法，比如取集合大小的时候， begin..和finsh..必须成对出现</e></li>
  <li>当客户端调用远程服务的时候，远程服务是运行在Binder线程池的，而且客户端会被挂起，如果服务端比较耗时，客户端就会堵塞，如果客户端又是UI线程会导致ANR；而且客户端onServiceConnected和onServiceDisConnected都是在UI线程，所以执行的时候请开线程（Demo中并未有那么做，请注意）；另外服务端方法本身就是执行在线程池的，请不要另开线程执行任务，除非你知道你这么干，否则不要这么做；同理，服务端掉客户端的接口也是一个道理，耗时任务请开线程，否则服务端无法响应；而且客户端的onNewBookArrive方法是运行在Binder线程池的，不要操作UI，请用Handler。</li>
  <li>Binder可能意外死亡，一般是由于服务端进程挂了，需要重新连接。有两种方法，第一种，给Binder设置DeathRecipient监听，死亡时会回调binderDied方法,在里面重连服务；第二种，onServiceDisConnected方法里面重连；二者的区别前者是Binder线程池的回调，后者是UI线程的回调。</li>
  <li>权限验证，默认情况下任何人都可以连接远程服务。有两种方式进行验证，第一种，在onBind方法里面验证permission,当然需要我们先自定义权限，然后在代码中调用checkCallingOrSelfPermission方法；第二种方法，在服务端的onTransact方法中进行权限验证，还可以采用UID和PID来验证，通过getCallingUid和getCallingPid方法拿到客户端所属的UID和PID，根据UID和PackageManager的getPakagesForUid方法获取包名再验证</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Retrofit]]></title>
    <link href="http://www.holysroc.cn/blog/Retrofit.html"/>
    <updated>2017-04-10T11:51:28+08:00</updated>
    <id>http://www.holysroc.cn/blog/Retrofit</id>
    <content type="html"><![CDATA[<h3 id="retrofit">Retrofit</h3>

<p>Retrofit是什么？Type-safe HTTP client for Android and Java by Square，中文是由Square公司开发基于安卓和JAVA平台的的http客户端请求。</p>

<p>如何集成？compile ‘com.squareup.retrofit2:retrofit:2.2.0’（可以去github获取最新版）</p>

<!--more-->

<h3 id="section">基础</h3>

<h4 id="url">1.url规则：</h4>
<p>| path（设置的path）| baseUrl（设置的url）| result（最终请求的结果）|<br />
(对应下面的3行3列)</p>

<p>【绝对路径 /apath】 【http://host:port/a/b】 【http://host:port/apath】</p>

<p>【相对路径 apath】] 【http://host:port/a/b/】 【http://host:port/a/b/apath】</p>

<p>【相对路径 apath】 【http://host:port/a/b】 【http://host:port/a/apath】</p>

<p>【完整路径 http://host:port/aa/apath】【http://host:port/a/b】【http://host:port/aa/apath】</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OkHttp]]></title>
    <link href="http://www.holysroc.cn/blog/OkHttp.html"/>
    <updated>2015-07-09T11:51:28+08:00</updated>
    <id>http://www.holysroc.cn/blog/OkHttp</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
